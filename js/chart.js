// Generated by CoffeeScript 1.4.0
(function() {

  App.Chart = (function() {
    var getAnchors, height, paper, renderDot, renderDots, renderPath, width;

    function Chart() {}

    paper = void 0;

    getAnchors = function(p1x, p1y, p2x, p2y, p3x, p3y) {
      var a, alpha, b, dx1, dx2, dy1, dy2, l1, l2;
      l1 = (p2x - p1x) / 2;
      l2 = (p3x - p2x) / 2;
      a = Math.atan((p2x - p1x) / Math.abs(p2y - p1y));
      b = Math.atan((p3x - p2x) / Math.abs(p2y - p3y));
      if (p1y < p2y) {
        a = Math.PI - a;
      }
      if (p3y < p2y) {
        b = Math.PI - b;
      }
      alpha = Math.PI / 2 - ((a + b) % (Math.PI * 2)) / 2;
      dx1 = l1 * Math.sin(alpha + a);
      dy1 = l1 * Math.cos(alpha + a);
      dx2 = l2 * Math.sin(alpha + b);
      dy2 = l2 * Math.cos(alpha + b);
      return {
        x1: p2x - dx1,
        y1: p2y + dy1,
        x2: p2x + dx2,
        y2: p2y + dy2
      };
    };

    renderDot = function(x, y, index) {
      var Y, innerCircle, max, outerCircle;
      innerCircle = paper.circle(x, y, 5).attr({
        "cursor": "move",
        fill: "#FFF",
        stroke: "#009874",
        "stroke-width": 4
      });
      outerCircle = paper.circle(x, y, 30).attr({
        'cursor': 'move',
        fill: "transparent",
        stroke: "none"
      });
      outerCircle.innerCircle = innerCircle;
      outerCircle.data('index', index);
      if (!this.circles) {
        this.circles = [];
      }
      this.circles.push(outerCircle);
      y = void 0;
      max = 100;
      Y = height() / max;
      return outerCircle.drag(function(dx, dy) {
        var _y;
        _y = Math.min(Math.max(y + dy, 15), height() - 15);
        App.Model[this.data('index')] = Math.round(max - (_y / Y));
        this.attr({
          cy: Math.round(height() - Y * App.Model[this.data('index')])
        });
        this.innerCircle.attr({
          cy: Math.round(height() - Y * App.Model[this.data('index')])
        });
        this.innerCircle.toFront();
        App.Model[this.data('index')] = Math.round(max - (this.attr('cy') / Y));
        $('#model').html(JSON.stringify(App.Model));
        return renderPath();
      }, function() {
        return y = this.attr("cy");
      }, function() {
        renderPath();
        return renderDots();
      });
    };

    renderDots = function() {
      var X, Y, circle, i, max, x, y, _i, _j, _len, _ref, _ref1, _ref2, _results;
      if (this.circles) {
        _ref = this.circles;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          circle = _ref[_i];
          if (circle != null) {
            if ((_ref1 = circle.innerCircle) != null) {
              _ref1.remove();
            }
          }
          if (circle != null) {
            circle.remove();
          }
        }
      }
      X = width() / App.Model.length;
      max = 100;
      Y = height() / max;
      _results = [];
      for (i = _j = 0, _ref2 = App.Model.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
        y = Math.round(height() - Y * App.Model[i]);
        x = Math.round(X * (i + .5));
        _results.push(renderDot(x, y, i));
      }
      return _results;
    };

    renderPath = function() {
      var X, X0, X2, Y, Y0, Y2, a, bgpp, i, max, p, x, y, _i, _ref, _ref1, _ref2;
      X = width() / App.Model.length;
      max = 100;
      Y = height() / max;
      if ((_ref = this.path) != null) {
        _ref.remove();
      }
      if ((_ref1 = this.bgpath) != null) {
        _ref1.remove();
      }
      this.path = paper.path().attr({
        stroke: "#009874",
        "stroke-width": 4,
        "stroke-linejoin": "round"
      });
      this.bgpath = paper.path().attr({
        stroke: "none",
        opacity: .3,
        fill: "#009874"
      });
      for (i = _i = 0, _ref2 = App.Model.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        y = Math.round(height() - Y * App.Model[i]);
        x = Math.round(X * (i + .5));
        if (i === 0) {
          p = ["M", x, y, "C", x, y];
          bgpp = ["M", X * .5, height(), "L", x, y, "C", x, y];
        }
        if (i !== 0 && i < App.Model.length - 1) {
          Y0 = Math.round(height() - Y * App.Model[i - 1]);
          X0 = Math.round(X * (i - .5));
          Y2 = Math.round(height() - Y * App.Model[i + 1]);
          X2 = Math.round(X * (i + 1.5));
          a = getAnchors(X0, Y0, x, y, X2, Y2);
          p = p.concat([a.x1, a.y1, x, y, a.x2, a.y2]);
          bgpp = bgpp.concat([a.x1, a.y1, x, y, a.x2, a.y2]);
        }
      }
      p = p.concat([x, y, x, y]);
      this.path.attr({
        path: p
      }).toBack();
      bgpp = bgpp.concat([x, y, x, y, "L", x, height(), "z"]);
      return this.bgpath.attr({
        path: bgpp
      }).toBack();
    };

    height = function() {
      return innerHeight - 70;
    };

    width = function() {
      return $('#chart').innerWidth();
    };

    Chart.prototype.render = function() {
      if (paper != null) {
        paper.remove();
      }
      paper = new Raphael('chart', width(), height());
      renderPath();
      return renderDots();
    };

    return Chart;

  })();

}).call(this);
